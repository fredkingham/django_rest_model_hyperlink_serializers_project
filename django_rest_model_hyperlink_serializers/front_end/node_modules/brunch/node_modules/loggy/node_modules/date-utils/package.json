{
  "name": "date-utils",
  "description": "Date add-ons for Node.js",
  "version": "1.2.13",
  "keywords": [
    "date",
    "utils",
    "date-utils",
    "time"
  ],
  "author": {
    "name": "Jerry Sievert",
    "email": "code@legitimatesounding.com",
    "url": "http://legitimatesounding.com/blog/"
  },
  "homepage": "http://github.com/JerrySievert/node-date-utils/",
  "contributors": [
    {
      "name": "Jerry Sievert",
      "url": "http://legitimatesounding.com"
    }
  ],
  "license": [
    "MIT"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/JerrySievert/node-date-utils.git"
  },
  "bugs": {
    "url": "http://github.com/JerrySievert/node-date-utils/issues"
  },
  "directories": {
    "lib": "./lib",
    "test": "./test"
  },
  "devDependencies": {
    "vows": ">=0.7.0"
  },
  "scripts": {
    "test": "vows --spec"
  },
  "engines": {
    "node": ">0.4.0"
  },
  "main": "./lib/date-utils",
  "readme": "# Date-Utils: Polyfills for the Date object\n\n[![Build Status](https://secure.travis-ci.org/JerrySievert/node-date-utils.png)](http://travis-ci.org/JerrySievert/node-date-utils)\n\n## In a nutshell\n\n- Micro-Framework adding missing functionality to the Date object\n- Useable as a polyfill in the browser\n- Useable as a polyfill in Node.js\n- Works in CouchDB\n\n## Using within a Browser\n    <script type=\"text/javascript\" src=\"date-utils.min.js\"></script>\n\n## Using with Node.js\n    $ npm install date-utils\n    \n    require('date-utils');\n\nNote: This did not work in the `REPL` before `Node.js 0.6` due to how `Node.js` handles context in the `REPL`.\n\n## Static Methods\n    Date.today(); // today, 00:00:00\n    Date.yesterday(); // yesterday, 00:00:00    \n    Date.tomorrow(); // tomorrow, 00:00:00\n\n    Date.validateDay(day, year, month); // true/false whether a date is valid\n    Date.validateYear(year); // true/false whether a year is valid\n    Date.validateMonth(month); // true/false whether a month is valid\n    Date.validateHour(hour); // true/false whether an hour is valid\n    Date.validateMinute(minute); // true/false whether a minute is valid\n    Date.validateSecond(second); // true/false whether a second is valid\n    Date.validateMillisecond(millisecond); // true/false whether a millisecond is valid\n    \n    Date.compare(date1, date2); // -1 if date1 is smaller than date2, 0 if equal, 1 if date2 is smaller than date1\n    Date.equals(date1, date2); // true/false if date1 is equal to date2\n\n    Date.getDayNumberFromName(name); // su/sun/sunday - 0, mo/mon/monday - 1, etc\n    Date.getMonthNumberFromName(name); // jan/january - 0, feb/february - 1, etc\n    Date.isLeapYear(year); // true/false whether the year is a leap year\n    Date.getDaysInMonth(monthNumber); // number of days in the month\n\n## Instance Methods\n    d.clone(); // returns a new copy of date object set to the same time\n    d.getMonthAbbr(); // abreviated month name, Jan, Feb, etc\n    d.getMonthName(); // fill month name, January, February, etc\n    d.getUTCOffset(); // returns the UTC offset\n    d.getOrdinalNumber(); // day number of the year, 1-366 (leap year)\n    d.clearTime(); // sets time to 00:00:00\n    d.setTimeToNow(); // sets time to current time\n    d.toFormat(format); // returns date formatted with:\n      // YYYY - Four digit year\n      // MMMM - Full month name. ie January\n      // MMM  - Short month name. ie Jan\n      // MM   - Zero padded month ie 01\n      // M    - Month ie 1\n      // DDDD - Full day or week name ie Tuesday \n      // DDD  - Abbreviated day of the week ie Tue\n      // DD   - Zero padded day ie 08\n      // D    - Day ie 8\n      // HH24 - Hours in 24 notation ie 18\n      // HH   - Padded Hours ie 06\n      // H    - Hours ie 6\n      // MI   - Padded Minutes\n      // SS   - Padded Seconds\n      // PP   - AM or PM\n      // P    - am or pm\n    d.toYMD(separator); // returns YYYY-MM-DD by default, separator changes delimiter\n    \n    d.between(date1, date2); // true/false if the date/time is between date1 and date2\n    d.compareTo(date); // -1 if date is smaller than this, 0 if equal, 1 if date is larger than this\n    d.equals(date); // true/false, true if dates are equal\n    d.isBefore(date); // true/false, true if this is before date passed\n    d.isAfter(date); // true/false, true if this is after date passed\n    d.getDaysBetween(date); // returns number of full days between this and passed\n    d.getHoursBetween(date); // returns number of hours days between this and passed\n    d.getMinutesBetween(date); // returns number of full minutes between this and passed\n    d.getSecondsBetween(date); // returns number of full seconds between this and passed\n    \n    d.add({ milliseconds: 30,\n            minutes: 1,\n            hours: 4,\n            seconds: 30,\n            days: 2,\n            weeks: 1,\n            months: 3,\n            years: 2}); // adds time to existing time\n    \n    d.addMilliseconds(number); // add milliseconds to existing time\n    d.addSeconds(number); // add seconds to existing time\n    d.addMinutes(number); // add minutes to existing time\n    d.addHours(number); // add hours to existing time\n    d.addDays(number); // add days to existing time\n    d.addWeeks(number); // add weeks to existing time\n    d.addMonths(number); // add months to existing time\n    d.addYears(number); // add years to existing time\n\n    \n",
  "readmeFilename": "README.md",
  "_id": "date-utils@1.2.13",
  "_from": "date-utils@~1.2.12"
}
