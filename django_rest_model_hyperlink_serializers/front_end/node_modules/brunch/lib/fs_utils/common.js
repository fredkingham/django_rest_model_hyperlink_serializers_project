// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var debug, fs, ignored, ignoredAlways, mkdirp, ncp, os, sysPath;

  debug = require('debug')('brunch:common');

  fs = require('fs');

  mkdirp = require('mkdirp');

  ncp = require('ncp').ncp;

  os = require('os');

  sysPath = require('path');

  exports.exists = fs.exists || sysPath.exists;

  exports.sep = sysPath.sep || (os.platform() === 'win32' ? '\\' : '/');

  exports.writeFile = function(path, data, callback) {
    var write;
    debug("Writing file '" + path + "'");
    write = function(callback) {
      return fs.writeFile(path, data, callback);
    };
    return write(function(error) {
      if (error == null) {
        return callback(null, path, data);
      }
      return mkdirp(sysPath.dirname(path), 0x1ed, function(error) {
        if (error != null) {
          return callback(error);
        }
        return write(function(error) {
          return callback(error, path, data);
        });
      });
    });
  };

  exports.ignored = ignored = function(path) {
    return /(^[.#]|(?:__|~)$)/.test(sysPath.basename(path));
  };

  exports.ignoredAlways = ignoredAlways = function(path) {
    return /^\.(git|hg)$/.test(sysPath.basename(path));
  };

  exports.copy = function(source, destination, callback) {
    var copy, parentDir;
    if (ignored(source)) {
      return callback();
    }
    copy = function(error) {
      var fsStreamErrHandler, input, output;
      if (error != null) {
        return callback(error);
      }
      fsStreamErrHandler = function(err, io) {
        debug("File copy " + io + ": " + err);
        if (err.toString().match(/OK, open/)) {
          debug("Retrying copy of " + source);
          return copy();
        } else {
          return callback(err);
        }
      };
      input = fs.createReadStream(source);
      output = input.pipe(fs.createWriteStream(destination));
      input.on('error', function(err) {
        return fsStreamErrHandler(err, 'input');
      });
      output.on('error', function(err) {
        return fsStreamErrHandler(err, 'output');
      });
      return output.on('close', callback);
    };
    parentDir = sysPath.dirname(destination);
    return exports.exists(parentDir, function(exists) {
      if (exists) {
        return copy();
      } else {
        return mkdirp(parentDir, copy);
      }
    });
  };

  exports.copyIfExists = function(source, destination, filter, callback) {
    var options;
    if (filter == null) {
      filter = true;
    }
    options = {
      stopOnError: true
    };
    options.filter = filter ? function(path) {
      return !ignored(path);
    } : function(path) {
      return !ignoredAlways(path);
    };
    return exports.exists(source, function(exists) {
      if (!exists) {
        return callback();
      }
      return ncp(source, destination, options, callback);
    });
  };

}).call(this);
