// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var SourceFile, SourceMapConsumer, SourceMapGenerator, SourceNode, debug, identityNode, isWindows, makeCompiler, makeWrapper, os, pipeline, replaceBackSlashes, sysPath, updateCache, _ref, _ref1;

  debug = require('debug')('brunch:source-file');

  sysPath = require('path');

  os = require('os');

  pipeline = require('./pipeline').pipeline;

  _ref = require('../helpers'), identityNode = _ref.identityNode, replaceBackSlashes = _ref.replaceBackSlashes;

  _ref1 = require('source-map'), SourceMapConsumer = _ref1.SourceMapConsumer, SourceMapGenerator = _ref1.SourceMapGenerator, SourceNode = _ref1.SourceNode;

  isWindows = os.platform() === 'win32';

  updateCache = function(realPath, cache, error, result, wrap) {
    var compiled, dependencies, filePath, map, mapping, nodeData, prefix, source, sourceMap, sourcePos, suffix, wrapped;
    if (error != null) {
      cache.error = error;
    } else if (result == null) {
      cache.error = null;
      cache.data = null;
      cache.compilationTime = Date.now();
    } else {
      dependencies = result.dependencies, compiled = result.compiled, source = result.source, sourceMap = result.sourceMap;
      filePath = replaceBackSlashes(realPath);
      if (sourceMap) {
        debug(("Generated source map for '" + filePath + "': ") + JSON.stringify(sourceMap));
      }
      cache.error = null;
      cache.dependencies = dependencies;
      cache.source = source;
      cache.compilationTime = Date.now();
      wrapped = wrap(compiled);
      if (typeof wrapped === 'object') {
        prefix = wrapped.prefix, suffix = wrapped.suffix;
        nodeData = wrapped.data || compiled;
      } else {
        sourcePos = wrapped.indexOf(compiled);
        nodeData = sourcePos > 0 ? compiled : wrapped;
        prefix = wrapped.slice(0, sourcePos);
        suffix = wrapped.slice(sourcePos + compiled.length);
      }
      cache.node = sourceMap != null ? (mapping = typeof sourceMap === 'string' ? JSON.parse(sourceMap.replace(/^\)\]\}'/, '')) : sourceMap, isWindows && mapping.sources ? mapping.sources = mapping.sources.map(replaceBackSlashes) : void 0, map = new SourceMapConsumer(mapping), SourceNode.fromStringWithSourceMap(nodeData, map)) : identityNode(nodeData, filePath);
      if (prefix) {
        cache.node.prepend(prefix);
      }
      if (suffix) {
        cache.node.add(suffix);
      }
      cache.node.source = filePath;
      cache.node.setSourceContent(filePath, source);
    }
    return cache;
  };

  makeWrapper = function(wrapper, path, isWrapped, isntModule) {
    return function(node) {
      if (isWrapped) {
        return wrapper(path, node, isntModule);
      } else {
        return node;
      }
    };
  };

  makeCompiler = function(realPath, path, cache, linters, compilers, wrap) {
    return function(callback) {
      var _this = this;
      return pipeline(realPath, path, linters, compilers, function(error, data) {
        updateCache(realPath, cache, error, data, wrap);
        if (error != null) {
          return callback(error);
        }
        return callback(null, cache.data);
      });
    };
  };

  module.exports = SourceFile = (function() {
    function SourceFile(path, compilers, linters, wrapper, isHelper, isVendor) {
      var compiler, compilerName, fileName, isWrapped, isntModule, realPath, wrap, _ref2;
      compiler = compilers[0];
      isntModule = isHelper || isVendor;
      isWrapped = (_ref2 = compiler.type) === 'javascript' || _ref2 === 'template';
      realPath = path;
      this.path = isHelper ? (compilerName = compiler.constructor.name, fileName = "brunch-" + compilerName + "-" + (sysPath.basename(realPath)), sysPath.join('vendor', 'scripts', fileName)) : path;
      this.type = compiler.type;
      this.source = null;
      this.data = '';
      this.node = null;
      this.dependencies = [];
      this.compilationTime = null;
      this.error = null;
      this.removed = false;
      this.disposed = false;
      wrap = makeWrapper(wrapper, this.path, isWrapped, isntModule);
      this.compile = makeCompiler(realPath, this.path, this, linters, compilers, wrap);
      debug("Initializing fs_utils.SourceFile: %s", JSON.stringify({
        path: this.path,
        isntModule: isntModule,
        isWrapped: isWrapped
      }));
      Object.seal(this);
    }

    SourceFile.prototype.dispose = function() {
      debug("Disposing file '" + this.path + "'");
      this.path = '';
      this.data = '';
      this.dependencies = [];
      this.disposed = true;
      return Object.freeze(this);
    };

    return SourceFile;

  })();

}).call(this);
